import { flags, SfdxCommand } from '@salesforce/command';
import * as fs from 'fs-extra';
import * as path from 'path';

let allClasses: string[] = [];

export default class extends SfdxCommand {

  public static description = 'This command clean up class filename with actual class file path in cobertura.xml. This code coverage file is generated by sfdx deploy when using coverageformatters option as cobertura'

  public static examples = [
    `$ sfdx dxb:apex:coverage --file tests/coverage/cobertura.xml`
  ];

  public static args = [{ name: 'file' }];

  protected static flagsConfig = {
    file: flags.string({ char: 'f', description: 'Location of cobertura.xml', required:true})
  };

  public async run() {
    //flags
    let originFile = this.flags.file;
    let fileContent = fs.readFileSync(originFile).toString();
    const results = [...fileContent.matchAll(/filename=".*?"/g)];
    this.getAllClasses('.');
    results.forEach(elem => {
      let classname = elem[0];
      classname = classname.split('filename="no-map/').join("").slice(0, -1);
      const classpath = allClasses.find( elem => elem.endsWith(`/classes/${classname}.cls`));
      fileContent = fileContent.split(`no-map/${classname}`).join(classpath);
    });
    fs.writeFileSync(originFile, fileContent);
  }

  public getAllClasses(directory: string) {
		var currentDirectorypath = path.join(directory);

		var currentDirectory = fs.readdirSync(currentDirectorypath, 'utf8');

		currentDirectory.forEach((file: string) => {
			var pathOfCurrentItem: string = path.join(directory + '/' + file);
			if (fs.statSync(pathOfCurrentItem).isFile() && file.endsWith('.cls')) {
				allClasses.push(pathOfCurrentItem);
			} else if (!fs.statSync(pathOfCurrentItem).isFile()) {
				var directorypath = path.join(directory + '/' + file);
				this.getAllClasses(directorypath);
			}
		});
	}
}